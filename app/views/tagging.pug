extends layout

block sidenav
	nav#sidenav.sidenav-project
		nav#legend
			h3 Legend
			ul#legend-list
				//
					<li><b>1. </b>Person</li>
					<li><b>2. </b>Injury</li>
					<li><b>3. </b>Body part</li>
					<li><b>4. </b>Vehicle</li>
					<li><b>5. </b>Activity</li>
					<li><b>6. </b>Location</li>
					<li><b>7. </b>Date/time</li>
					<li><b>8. </b>Accident cause</li>
					<li><b>9. </b>Condition</li>
		//
			<nav id="hotkeys">
			<h3>Hotkeys</h3>
			<ul>
			<li><b>j</b>: jump to group</li>
			<li><b>l</b>: show/hide legend</li>
			<li><b>1-9</b>: tag entity</li>
			</ul>
			</nav>

block content
	div#tagging-container
		#sentence-tagging


block scripts
	//script(type='text/javascript', src='/javascripts/dummy_data/json_data.js')

	script.

		var data = !{data};
		var entity_classes = !{entity_classes}
		var entity_classes_abbr = !{entity_classes_abbr}

		
		var tagClassNames = entity_classes_abbr // from the js file


		var loading = true // can't do anything if loading

		//document.getElementById("sentence-tagging").innerHTML = data

		var st = $("#sentence-tagging")
		var WS = "<span class=\"word\">"
		var WE	 = "</span>" 
		var PS = "<span class=\"punctuation\">"
		var PE	 = "</span>" 

		var BATCH_SIZE = 10

		var groupNumber = 1 // Each batch is 10 records
		var groupTotal = Math.floor(data.length / BATCH_SIZE) + 1 // It's actually 5 for now

		var annotatedTagNumbers = []
		var annotatedTags = []



		var groupData
		var sentenceIndex
		var wordIndex
		var sentenceLength
		var selectedWord
		var chainStart
		var chainType
		var currentlyScrolling = false

		var selectingJump = false
		var ended = false

		function finishedScrolling() {
				currentlyScrolling = false
		}

		function generateLegend() {
				var ll = $("#legend-list")
				var count = 0
				for(var i = 0; i < entity_classes.length; i++) {
						count++
						if(count == 10) {
								count = 0
						}
						ll.append("<li><b>" + count + ". </b>" + entity_classes[i] + "</li>")
				}
		}
		generateLegend()

		function loadGroup() {



				$("#ending-message").remove()

				loading = true

				if(groupNumber <= groupTotal) { 


						groupStart = (groupNumber - 1) * BATCH_SIZE
						groupEnd = groupStart + BATCH_SIZE
						groupData = data.slice(groupStart, groupEnd)


						$("#tagging-container").children(0).fadeOut(300, continueLoading);

				} else {
						$("#tagging-container").children(0).fadeOut(300, showEndingMessage);
				}



				function continueLoading() {

						annotatedTagNumbers = []
						annotatedTags = []

						st.remove()
						$("<div id=\"sentence-tagging\"></div>").hide().appendTo("#tagging-container").fadeIn(300)
						st = $("#sentence-tagging")

						//window.setTimeout(300, function() { st.addClass("show")})
						//st.addClass("show");

						//console.log(st)

						showSentenceCounter()

						$.each(groupData, function(key, value) {

								var content = WS + value.join(WE + "" + WS);
								content += WE
								// Remove punctuation-only words
								content = content.replace(/<span class="word">([.,\/#!$%\^&\*;:{}=\-_`~()"'])+<\/span>/g, "<span class=\"punctuation\">$1</span>")
								var s = st.append("<div class=\"sentence\">" + content + "</div>")

								annotatedTagNumbers.push(new Array(value.length).fill(-1))
								annotatedTags.push(new Array(value.length).fill("O"))

						});

						sentenceIndex = 0
						wordIndex = -1
						sentenceLength = calculateSentenceLength()
						selectedWord = getSelectedWord()
						chainStart = -1
						chainType = "forwards"
						st.children(0).eq(sentenceIndex).addClass("selected")
						moveForward()


						$("#group-total").html(groupTotal)
						$("#group-number").html(groupNumber)
						if(currentlyScrolling) {
								$("html, body").scrollTop(st.children().eq(sentenceIndex).offset().top - 150)
						} else {
								currentlyScrolling = true
								$("html, body").animate({
										scrollTop: st.children().eq(sentenceIndex).offset().top - 150
								}, 200, finishedScrolling);										
						}

						loading = false
						selectedWord.addClass("selected")


				}
				function showEndingMessage() {
						showSentenceCounter()

						st.remove()
						$("<div id=\"sentence-tagging\"></div>").hide().appendTo("#tagging-container").fadeIn(300)
						st = $("#sentence-tagging")

						$("#tagging-container").append("<div id=\"ending-message\">Thanks for using Michael's tagging platform.<br/><br/>Please copy/paste all of the downloaded annotation files into the <code>annotated_data</code> folder and use the <code>combine_data.py</code> program to combine them.</div>")

						showEndingNotification()
						loading = false
						ended = true
				}
		}
		loadGroup()



		function generateAnnotatedTags() {
				for(var i = 0; i < annotatedTagNumbers.length; i++) {
						for(var j = annotatedTagNumbers[i].length - 1; j >= 0; j--) {
								tagNumber = annotatedTagNumbers[i][j]
								if(tagNumber == -1) {
										annotatedTags[i][j] = "O"
								} else {
										annotatedTags[i][j] = "B-" + tagClassNames[tagNumber]
										if(j > 0) {
												if(annotatedTagNumbers[i][j - 1] == tagNumber) {
														annotatedTags[i][j] = "I-" + tagClassNames[tagNumber]
												}
										}
								}
						}				

				};
		}
		

		function getSelectedWord() {
				selectedWord = st.children().eq(sentenceIndex).children('span.word').eq(wordIndex)
		}
		

		function calculateSentenceLength() {
				sentenceLength = st.children().eq(sentenceIndex).children('span.word').length		
				return sentenceLength
		}


		function tagSelected(tagClass) {
				$("span.word.selected").removeClass(function (index, className) {
						return (className.match (/(^|\s)tag-\S+/g) || []).join(' ');
				});

				$("span.word.selected").addClass("tag")
				$("span.word.selected").addClass("tag-" + tagClass)
				var tc = tagClass - 1
				console.log(tc)
				if(tc == -1)
						tc = 9
				$("span.word.selected").attr("data-content", entity_classes[tc])
				$("span.word.selected").each(function(e) {
						annotatedTagNumbers[sentenceIndex][$(this).index()] = tagClass - 1;
				});


		
				$(".word").removeClass("selected")
				moveForward()
		}

		function highlightSelected(direction) {						
				if(!chaining) {								
						$(".word").removeClass("selected")
						chainStart = -1
				} else {

						var arr = st.children().eq(sentenceIndex).children('span.word.selected')
						var last = $(arr[arr.length - 1])
						var first = $(arr[0])

						if(direction == "forwards") {
								if($('span.word.selected').length == 1) {
										chainStart = wordIndex
										chainType = "forwards"
								}
								if(chainType == "forwards") {
										if(first.index() < chainStart - 1) {
												first.removeClass("selected")
										}
								} else {
										if(first.index() < chainStart) {
												first.removeClass("selected")
										}												
								}

						} else if (direction == "backwards") {
								if($('span.word.selected').length == 1) {
										chainStart = wordIndex + 1
										chainType = "backwards"
								}
								if(last.index() >= chainStart && chainType == "forwards") {
										last.removeClass("selected")
								}
						}
				}
				if(!loading) {
						selectedWord.addClass("selected")
						var oft = selectedWord.offset().top
						if($(window).height() - (oft - $("body").scrollTop()) < 150 || $("body").scrollTop() - oft > -150) {
								if(currentlyScrolling) {
										$("html, body").scrollTop(oft - 150)
								} else {
										currentlyScrolling = true
										$("html, body").animate({
												scrollTop: oft - 150
										}, 200, finishedScrolling);
								}
						}
				}
				
				//$("html, body").animate({
				//		scrollTop: st.children().eq(sentenceIndex).offset().top - 150
				//}, 100);
		}

		function nextSentence() {
				if(sentenceIndex < groupData.length - 1) {
						sentenceIndex++								
						$(".sentence").removeClass("selected")
						st.children().eq(sentenceIndex).addClass("selected")
						$("#sentence-number").html(sentenceIndex + 1)		
						if(currentlyScrolling) {
								$("html, body").scrollTop(st.children().eq(sentenceIndex).offset().top - 150)
						} else {
								currentlyScrolling = true
								$("html, body").animate({
										scrollTop: st.children().eq(sentenceIndex).offset().top - 150
								}, 200, finishedScrolling);
						}																

						wordIndex = 0
						sentenceLength = calculateSentenceLength()
				} else {
						saveDataToFile()
						groupNumber++
						loadGroup(groupNumber)
				}
		}
		function previousSentence() {
				if(sentenceIndex > 0) {
						sentenceIndex--		
						$(".sentence").removeClass("selected")
						st.children().eq(sentenceIndex).addClass("selected")
				
						if(currentlyScrolling) {
								$("html, body").scrollTop(st.children().eq(sentenceIndex).offset().top - 150)
						} else {
								currentlyScrolling = true
								$("html, body").animate({
										scrollTop: st.children().eq(sentenceIndex).offset().top - 150
								}, 200, finishedScrolling);
						}				
						$("#sentence-number").html(sentenceIndex + 1)

						sentenceLength = calculateSentenceLength()
						wordIndex = sentenceLength - 1
				}
		}

		function moveForward() {
				wordIndex++

				if(wordIndex >= sentenceLength) {
						nextSentence()
				}
				getSelectedWord()
				highlightSelected("forwards");
		}
		function moveBackward() {
				wordIndex--
				if(wordIndex < 0) {
						if(sentenceIndex > 0) {

								previousSentence()
						}
				}
				if(wordIndex == -1) {
						wordIndex = 0
				}
				getSelectedWord()
				highlightSelected("backwards");
		}

		function deleteTag() {
				selectedWord.removeClass(function (index, className) {
						return (className.match (/(^|\s)tag-\S+/g) || []).join(' ');
				});
				selectedWord.removeClass("tag")
				annotatedTagNumbers[sentenceIndex][selectedWord.index()] = - 1;
				

		}


		function jumpButtonFocus() {

		}

		$("#jump-to-batch").focus(function() {
				selectingJump = true


		})
		$("#jump-to-batch").blur(function() {
				selectingJump = false

		})

		var chaining = false
		var map = {37: false, 39: false, 16: false};
		$(document).keydown(function(e) {
						if(!selectingJump && !loading && !ended) {
								if (e.keyCode in map) {
										if(e.keyCode == 16) {
												chaining = true
										}
										map[e.keyCode] = true;
										if (map[37]) {				// Left
												
												if (map[16]) {
														chaining = true
												} else {
														chaining = false
												}
												moveBackward()
										} else if (map[39]) {	// Right
												
												if (map[16]) {
														chaining = true
												} else {
														chaining = false
												}
												moveForward()
										}
								}
								if(e.keyCode >= 48 && e.keyCode <= 57) {
										tagSelected(e.keyCode - 48)
								}

								if(e.keyCode == 40) {								
										nextSentence()
										wordIndex = -1
										moveForward()
								}
								if(e.keyCode == 38) {
										previousSentence();
										wordIndex = -1
										moveForward()
								}
								if(e.keyCode == 46) {
										deleteTag()
								}
								if(e.keyCode == 8) {
										moveBackward()
										deleteTag()
								}

				} else {
						if(e.keyCode == 13) {
								$("#jump-to-batch-go").click()
						}
						if(e.keyCode == 27) {
								$("#jump-to-batch").blur()
						}
				}

				if(e.keyCode == 74) { // j
						console.log('j')
						$("#jump-to-batch").focus()
				}
				}).keyup(function(e) {
				if (e.keyCode in map) {
						/*if(e.keyCode == 16 && 16 in map) {
								chaining = false
						}*/
						map[e.keyCode] = false;
				}
		});

		// Keypress events
		/*$("body").keydown(function(e) {
				console.log(e)
			if(e.keyCode == 37 || e.keyCode == 65 ) { // left
				console.log("left")
				moveBackward()
			}
			else if(e.keyCode == 39 || e.keyCode == 68) { // right
				console.log("right")
				moveForward()
			}
		});*/




		function showSavingNotification(filename) {
				$("#loading-notification").hide()
				$("#ending-notification").hide()
				$("#saving-notification").show();
				$("#saving-filename").html(filename + "...")
				$("#sentence-counter").hide();
		}
		function showSentenceCounter() {
				$("#loading-notification").hide()
				$("#ending-notification").hide()
				$("#saving-notification").hide();
				$("#sentence-counter").show();
		}
		function showEndingNotification() {
				$("#loading-notification").hide()
				$("#ending-notification").show()
				$("#saving-notification").hide();
				$("#sentence-counter").hide();						
		}


		$("#jump-to-batch-go").click(function() {
				console.log($("#jump-to-batch")[0].value)
				console.log("clicked")
				function validateValue(value) {
						var val = parseInt(value)
						if(val > 0 && val < groupTotal + 1) {
								return val
						} else {
								return -1
						}
				}
				var v = validateValue($("#jump-to-batch")[0].value)
				if(v > 0) {
						groupNumber = v;
						ended = false
						loadGroup()
						$("#jump-to-batch").val("")
						$("#jump-to-batch").blur()
				} else {
						showJumpToGroupError()
				}
		})


		function showJumpToGroupError() {
				function fadeBackOut() {
						window.setTimeout(function() { $("#jump-to-batch-error").fadeOut(300)}, 1000 )
				}
				if($("#jump-to-batch-error:visible").length == 0)
						$("#jump-to-batch-error").fadeIn(300, fadeBackOut)
		}

		function saveDataToFileOutput(dataFilename) {
				generateAnnotatedTags()
				outputData = ""
				for(var i = 0; i < groupData.length; i++) {
						for(var j = 0; j < groupData[i].length; j++) {
								outputData += groupData[i][j] + " " + annotatedTags[i][j] + "\n"
						}
						outputData += "\n"
				}

				var dlfile = document.createElement('a');
				dlfile.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(outputData));
						dlfile.setAttribute('download', dataFilename);
				var event = document.createEvent('MouseEvents');
					event.initEvent('click', true, true);
				dlfile.dispatchEvent(event);
		}

		function saveDataToFileSuppressNotification() {
				var dataFilename = "annotated_data_" + groupNumber + ".txt"
				saveDataToFileOutput(dataFilename)
		}

		function saveDataToFile() {
				var dataFilename = "annotated_data_" + groupNumber + ".txt"
				showSavingNotification(dataFilename)
				saveDataToFileOutput(dataFilename)						
		}

		$("#save-to-file").click(saveDataToFileSuppressNotification)
