extends layout

block head
	<script src='/javascripts/spectrum.js'></script>
	<link rel='stylesheet' href='/stylesheets/spectrum.css' />


block sidenav

	section#setup-menu
		nav#sidenav.sidenav-setup

			ul.setup-stages#nav-setup-stages
				li#li-project-details 
					span 						
						| Project Details
						i.fa.fa-check
				li#li-upload-tokenized.not-yet-started
					span 
						i.fa.fa-check
						| Dataset
				li#li-entity-categories.not-yet-started
					span 
						i.fa.fa-check
						| Entity Categories
				li#li-distribution.not-yet-started
					span 
						i.fa.fa-check
						| Distribution
				li#li-project-options.not-yet-started
					span 
						i.fa.fa-check
						| Project Options
				li#li-submission.not-yet-started
					span 
						i.fa.fa-check
						| Submission

block content



		div#error-banner
			<i class="fa fa-exclamation-triangle"></i>&nbsp;&nbsp; There was a problem communicating with the server. Data entered into the form may not be saved.<a href="#" id="close-error-banner"><i class="fa fa-close"></i></a>
		div#setup-questions


			article#project-details.article-heading
				h1 Project Details				
				div.form-section
					p Please enter the details of your project below.
					form#project-details-form
						div#project-name-form.form-group
							label(for="input-project-name") Project Name (required)
							input(id="input-project-name" maxlength="100" placeholder="Project Name" autofocus required pattern=".*[A-Za-z0-9]+.*")
							div.form-help The name of the project.
						div#project-description-form.form-group
							label(for="input-project-description") Project Description (optional)
							input(id="input-project-description" maxlength="500" tabindex="-1" placeholder="Project Description")
							div.form-help A short description of the project.
						//div.submit-row
						//	input(type="submit" value="Next: Upload Dataset")
				div#saved-notification-project-details.saved-notification
					p <i class="fa fa-check"></i> This section has been saved.
						
			article#upload-tokenized.article-heading.not-scrolled-to
				h1 Dataset				
				div.form-section
					p Please upload your  data using the form below.
					p The dataset must be saved as a <code>.txt</code> file. Each token within your data must be separated by a space, and each document must be on a new line. <a href="" + base_url + "files/example_dataset.txt" download>Click here</a> to download a small example file.

					- var action = 'upload-tokenized';
					include partials/upload_widget

				div#saved-notification-upload-tokenized.saved-notification
					p <i class="fa fa-check"></i> This section has been saved.

			article#entity-categories.article-heading.not-scrolled-to
				h1 Entity Categories
				div.form-section
					p Please determine the entity categories in your data using the form below.
					p You may create new categories by entering them in the form below. To specify a parent category, place a space before the child category. The categories are visualised in the Category Hierarchy, which you may also use to create your hierarchy if you prefer. You may also select from a list of presets, such as the standard 4-class Named Entity Recognition model.
					div#entity-categories-summary
						p.ec-success Your entity categories have been successfully uploaded.
						p.ec-loading <i class="fa fa-cog fa-spin"></i>&nbsp;&nbsp;Uploading entity categories...
						p.ec-error Your category hierarchy contained an error and has not been saved.
						div.box__success_details#entity-categories-summary-box
					button.large-button#button-create-entity-categories Create entity categories&nbsp;<i class="fa fa-external-link"></i>
					div#saved-notification-entity-categories.saved-notification
						p <i class="fa fa-check"></i> This section has been saved.

			article#distribution.article-heading.not-scrolled-to
				h1 Distribution
				div.form-section
					p Please determine how you would like to distribute the annotation task.
					blockquote
						a(id="distribute-self-button" class="subsection-open-button") I'll annotate the data myself. I may invite other users to help annotate later.
					blockquote
						a(id="distribute-to-emails-button" class="subsection-open-button") I have a list of the email addresses of people who will annotate my data.
			
					//- div#distribute-self.subsection.subsection-hidden
					//- 	h3 Self Annotation
					//- 	p OK then.
					div#distribute-to-emails.subsection.subsection-hidden
						//.subsection-hidden
						h3 Distribute via Email
						p Please enter a list of emails below, one per line. An invitation to annotate your dataset will be sent to every valid email address via Redcoat's mail server.
						form#distribute-emails-form.special-textarea-form
							div#distribute-emails-validation.special-textarea-validation
							div#distribute-emails-teextarea-container.special-textarea-container
								textarea.special-textarea#distribute-emails-textarea(rows="10", wrap="off"  cols="254" placeholder="example1@example.com\nexample2@example.com")
								div#distribute-emails-count-container
									<span id="distribute-emails-count">0</span>/#{max_emails} unique emails entered.<span id="distribute-emails-warning"> Only the first #{max_emails} email addresses entered will be sent invitations.</span>						
				div#saved-notification-distribution.saved-notification
					p <i class="fa fa-check"></i> This section has been saved.

			article#project-options.article-heading.not-scrolled-to
				h1 Project options
				div.form-section
					form#other-options-form
						div.form-group
							label(for="input-allow-new-categories") To what extent should annotators be able to modify the category hierarchy?
							select#input-hierarchy-permissions
								option(disabled selected value="not-selected") (click to select)
								option(value="no_modification") No modifications allowed.
								option(value="create_edit_only") Users can create new categories.
								option(value="full_permission") Users can create, delete, and rename categories.
							div.form-help If allowed, users will be able to add categories as they appear, or delete ones that aren't relevant. This option is useful if you aren't sure whether your category hierarchy covers every possible category in your dataset. 
						div.form-group
							label(for="input-overlap") How many times should a document be annotated before annotation is considered complete?
							div.input-range-group.disabled#input-range-group
								div.disabled-message <span class="inapplicable">This option is inapplicable because you are the only annotator.</span><span class="havent-started">Please complete the Distribution section to enable this option.</span>
								div.inner
									div.input-range-summary#input-overlap-summary
										p <span class="num">1</span> annotation<span class="plural"></span>/document<br>
										p.small Each annotator labels approximately <span class="avg">100</span>% of the corpus 
										//&nbsp;&nbsp;<i class="fa fa-info-circle" title="This is assuming each annotator contributes equally. "></i>
									div.input-range-container
										div.left 1
										input(id="input-overlap" name="input-overlap" type="range" min="1" max="10" value="1")
										div.right 10
									div.form-help More overlap can result in a more robust set of results, but requires longer annotation time. You can mark your project as "complete" at any time.
						div.form-group
							label(for="input-automatically-tag") Should commonly-tagged words be automatically tagged?
							select#input-automatic-tagging
								option(disabled selected value="") (click to select)
								option(value="true") Yes.
								option(value="false") No.
							div.form-help Redcoat can automatically tag words that have been seen more than 20 times by the annotators of your project. Only words that have been labelled more than 90% of the time as a particular class will be automatically tagged. Annotators may modify or delete these automatic annotations before they are saved.

				div#saved-notification-project-options.saved-notification
					p <i class="fa fa-check"></i> This section has been saved.

			//- article#dataset.article-heading.not-scrolled-to
			//- 	h1 Administrator Account
			//- 	div.form-section
			//- 		p In order to keep track of the annotation and to easily download the data that has been annotated, please provide a username and password below. This will provide you with the ability to log in to the application through the homepage.
			//- 		form
			//- 			div.form-group
			//- 				label(for="input-project-name") Username*
			//- 				input(id="input-project-name" placeholder="Username" autofocus required)
			//- 			div.form-group(style="margin-top: -20px")
			//- 				label(for="input-project-name") Password*
			//- 				input(id="input-project-name" type="password" placeholder="")


			article#submission.article-heading.not-scrolled-to
				h1 Submission
				div.form-section
					p Once you have completed the form, please click the submit button below to set up the project.
					form(action="testtt", method="post")
						div.submit-row
							input(type="hidden" name="_wippid" value="" + wip_project_id )
							input(type="hidden" name="_csrf" value="" + csrfToken )
							input(type="submit" value="Submit and create project")

			div(style="height: 600px")




block entity_categories_window
	div#entity-categories-window
		div.inner
			div.category-hierarchy
				h3 Category Hierarchy
				label Preset
				select#entity-categories-preset
					option(disabled selected value="no-preset") (no preset)
					option(value="NER") NER (4 classes)
					option(value="FIGER") FIGER (113 classes)
					option(value="Mining") Mining accidents (177 classes)
					option(value="Ultra-fine") Ultra-Fine (10,331 classes)
				form#entity-categories-text-form.special-textarea-form
					//div#entity-categories-validation.special-textarea-validation
					//div.special-textarea-container
						
					textarea#entity-categories-textarea(rows="12", wrap="off"  cols="254" placeholder="example_class_1\nexample_class_2\n   example_child_1\n   example_child_2\nexample_class_3")
					div#entity-categories-count-container



			div.category-tree
				h3 Visualisation
				svg#svg-entity-categories
				div#category-hierarchy-error
					div.message Generate a category hierarchy using the menu on the left.
			a.close <span>Save and close</span>&nbsp;<i class="fa fa-close"></i>

block scripts

	script(src="" + base_url + "javascripts/d3/d3.min.js")
	script(src="" + base_url + "javascripts/d3/d3-context-menu.js")
	script(src="" + base_url + "javascripts/shared/hierarchy_validator.js")
	script(src="" + base_url + "javascripts/category-tree-visualisation.js")
	script(src="" + base_url + "javascripts/setup_project/jquery.autosize.js")
	script(src="" + base_url + "javascripts/setup_project/jquery-linedtextarea.js")
	script(src="" + base_url + "javascripts/shared/hierarchy_presets.js")
	script(src="" + base_url + "javascripts/setup_project/page_scrolling.js")
	
	script.
		wippid = "#{wip_project_id}";

	script.
		function renderSuccessBox(metadata, form_ele, success_details_ele, sidenav_li_ele, saved_notification_ele) {
			form_ele.addClass( 'is-success' );
			form_ele.removeClass( 'is-error' );
			var details = "<table><tbody>";
			for(var i = 0; i < metadata.length; i++) {
				var k = Object.keys(metadata[i])[0];
				var v = metadata[i][k];
				details += "<tr><td><b>" + k + ":</b></td><td>" + v + "</td><tr/>";
			}
			details += "</tbody></table>"
			success_details_ele.html(details); // remove final <br/> tag.
			saved_notification_ele.addClass('show');
			sidenav_li_ele.addClass('completed');
		}

	script.
		var errorBannerTimeout;
		function displayServerErrorBanner() {
			$("#error-banner").addClass("show");
			//errorBannerTimeout = window.setTimeout(function() {				
			//}, 5000);
		}
		$("#close-error-banner").on('click', function(e) {
			e.preventDefault();
			$("#error-banner").removeClass("show");
		})

	script.
		var categoryHierarchy = new CategoryHierarchy();

		function uploadCategoryHierarchy(data) {
			$("#saved-notification-entity-categories").removeClass("show");
			$("#li-entity-categories").removeClass("completed");
			$("#entity-categories-summary").addClass("uploading");
			$.ajax(
			{
				url: 			'upload-hierarchy',
				type:			'POST',
				data: 			{data: data},
				dataType: 		"json",
				headers: { 'csrf-token': csrfToken, 'wippid' : wippid },
				complete: function()
				{
					//$form.removeClass( 'is-uploading' );
				},
				success: function( data )
				{
					console.log(data.metadata);
					console.log('yay labels!');
					if(data.success) {
						renderSuccessBox(data.metadata, $("#entity-categories-summary"), $("#entity-categories-summary-box"), $("#li-entity-categories"), $("#saved-notification-entity-categories"));
					} else {

						$("#entity-categories-summary").addClass("is-error")
					}
					
					$("#entity-categories-summary").removeClass("uploading");
				},
				error: function()
				{								
					displayServerErrorBanner();
				}
			});		

		}

		function showEntityCategoriesWindow() {
			$("#entity-categories-window").addClass("show");
			$('#main > *:not(#entity-categories-window').addClass("blur");
			$('#sidenav').addClass("blur");
			$('#navbar').addClass("blur");
			$('#entity-categories-summary').removeClass("is-success");
			$('#entity-categories-summary').removeClass("is-error");
		}
		function hideEntityCategoriesWindow() {
			$("#entity-categories-window").removeClass("show");
			$('#main > *:not(#entity-categories-window').removeClass("blur");
			$('#navbar').removeClass("blur");
			$('#sidenav').removeClass("blur");

			// Need to save the entities 
			//var entitySlashData = txt2slash($("#entity-categories-textarea").val().replace(/\t/g, " "));
			var entitySlashData = txt2slash($("#entity-categories-textarea").val());
			uploadCategoryHierarchy(entitySlashData);
			//console.log(entitySlashData);
		}
		$("#entity-categories-window .close").click(hideEntityCategoriesWindow);
		$("#button-create-entity-categories").click(showEntityCategoriesWindow);

			
		$("#er-body > *").hide();
		$("#er-body > *:nth-child(1)").show();
		$("#er-tabs a").on('click', function() {
			var i = $(this).closest('li').index();
			console.log(i);
			$("#er-tabs li").removeClass("active");
			$("#er-tabs li:nth-child(" + (i + 1) + ")").addClass("active");
			$("#er-body > *").hide();
			$("#er-body > *:nth-child(" + (i + 1) + ")").show();
		});

		function validateHierarchyInput(slash, done) {

			//var slash = txt2slash(txt);
			var ecv = $("#entity-categories-validation");

		    hierarchyValidator.validateCategoryHierarchy(slash, function(valid, em) {
				var eml = -1;
				if(!valid) {
					console.log("invalid tree");
					console.log(em);					
					eml = parseInt(em.slice(em.indexOf("<%") + 2, em.indexOf("%>")));    
				}
				if(em)
					em = em.replace(/<%\d+%>/g, (eml+1));

				$($("#entity-categories-text-form .lineno")[eml]).addClass("lineselect");
				done(valid, slash, em);
			});

		}

		$("#entity-categories-preset").change(function() {
			$("#entity-categories-text-form .lineno").removeClass("lineselect");
			var val = $(this).val();
			var preset = hierarchyPresets.presets[val]; 
			//var preset = slash2txt(hierarchyPresets.presets[val]); // the presets are stored in slash format, so we need to convert to txt first.
			//console.log(hierarchyPresets.presets[val], preset);
			$("#entity-categories-textarea").val(slash2txt(preset))
			//$("#entity-categories-textarea").val(preset.replace(/ /g, "\t"));
			validateHierarchyInput(preset, function(valid, slashData, errmsg) {
				if(valid) categoryHierarchy.buildTree(slashData);
				else categoryHierarchy.clearTree(errmsg);
			});			
		});

		var generatingTree = false;
		var treeGeneratingTimeout;

		var ect = $("#entity-categories-textarea");
		var ecv = $("#entity-categories-validation");

		ect.linedtextarea();

		function generateTree() {
			validateHierarchyInput(txt2slash(ect.val()), function(valid, slashData, errmsg) {
				if(valid) categoryHierarchy.buildTree(slashData)
				else categoryHierarchy.clearTree(errmsg);
			});		
			
		}

		ect.on('input', function(e) {

			$("#entity-categories-text-form .lineno").removeClass("lineselect");


			$("#entity-categories-preset").val("no-preset")

			var ss = ect[0].selectionStart;
			var se = ect[0].selectionEnd;

			ect.val(ect.val().replace(/\b[^\S\n]/g, "_"));

			ect[0].selectionStart = ss;
			ect[0].selectionEnd = se;

			// Move the cursor back to the correct position 


			//$("#saved-notification-distribution").removeClass("show");
			//$("#li-distribution").removeClass("completed");	
		
			// Remove validation mark from line user edited
			//var ln = $(this).val().substr(0, $(this)[0].selectionStart).split("\n").length;
			//var c = dev.children("i")
			//if(c[ln-1])
			//	$(c[ln-1]).addClass("hide");
			//console.log(ln);
			window.clearTimeout(treeGeneratingTimeout);
			treeGeneratingTimeout = window.setTimeout(generateTree, 1000);
			generatingTree = true;
		})



		// If category hierarchy or metadata exist...

		var category_hierarchy = !{category_hierarchy};
		var category_metadata = !{category_metadata};

		if(category_hierarchy && category_hierarchy.length > 0) {
			ect.val(slash2txt(category_hierarchy));
			generateTree();
		}
		if(category_metadata && category_metadata.length > 0) {
			var p = category_metadata[0].Preset;
			var o = $("#entity-categories-preset option[value=\"" + p + "\"]");
			if(o) o.attr("selected", "selected"); // Select the corresponding option in the presets dropdown
			renderSuccessBox(category_metadata, $("#entity-categories-summary"), $("#entity-categories-summary-box"), $("#li-entity-categories"), $("#saved-notification-entity-categories"));
		}


	script.

		function checkProjectOptionsCompletion() {
			if($("#input-automatic-tagging").val() != null && $("#input-hierarchy-permissions").val() != null) {
				$("#saved-notification-project-options").addClass('show');
				$("#li-project-options").addClass('completed');
				$("#error-banner").removeClass("show");					
			}
		}


	script.
		(function() {
			var p = "!{category_hierarchy_permissions}";
			var o = $("#input-hierarchy-permissions option[value=\"" + p + "\"]");
			if(o) {
				console.log(o, p)
				// TODO: check the overlap slider before marking complete				
				o.attr("selected", "selected");
				checkProjectOptionsCompletion();
			}
		})();

		$("#input-hierarchy-permissions").on('change', function(e) {
			$("#saved-notification-project-options").removeClass('show');
			$("#li-project-options").removeClass('completed');
			console.log(this.value);
			$.ajax(
			{
				url: 			'upload-hierarchy-permissions',
				type:			'POST',
				data: 			{ val: this.value },
				dataType: 		"json",
				headers: { 'csrf-token': csrfToken, 'wippid' : wippid },
				success: function( data )
				{
					checkProjectOptionsCompletion();
				},
				error: displayServerErrorBanner
			});						
		});


		var ion = $("#input-overlap-summary .num");
		var ioa = $("#input-overlap-summary .avg");
		var iop = $("#input-overlap-summary .plural");		
		var iov = $("#input-overlap");		

		function updateOverlapSummary(upload=true) {
			var numAnnotators = parseInt($("#input-range-group .right").html());
			var v = iov.val();
			ion.html(v);
			ioa.html((1 / numAnnotators * v * 100).toFixed(2));
			if(v > 1) iop.html("s");
			else iop.html("");

			if(upload) {
				$.ajax(
				{
					url: 			'upload-overlap',
					type:			'POST',
					data: 			{ val: iov.val() },
					dataType: 		"json",
					headers: { 'csrf-token': csrfToken, 'wippid' : wippid },
					success: function( data )
					{
						checkProjectOptionsCompletion();
					},
					error: displayServerErrorBanner
				});			
			}
				
		}

		iov.on('input', function() {
			updateOverlapSummary();
		});

		(function() {			
			var p = "!{overlap}";
			var o = $("#input-overlap");
			console.log(o, p)
			if(o) {
				o.val(p);
				checkProjectOptionsCompletion();		
			}
		})();


		updateOverlapSummary(false);

	script.

		var iat = $("#input-automatic-tagging");

		(function() {			
			var p = "!{automatic_tagging}";
			var o = $("#input-automatic-tagging option[value=\"" + p + "\"]");
			console.log(o, p)
			if(o) {
				o.attr("selected", "selected");
				checkProjectOptionsCompletion();		
			}
		})();

		iat.on('change', function() {
			$("#saved-notification-project-options").removeClass('show');
			$("#li-project-options").removeClass('completed');
			console.log(this.value);
			$.ajax(
			{
				url: 			'upload-automatic-tagging',
				type:			'POST',
				data: 			{ val: this.value },
				dataType: 		"json",
				headers: { 'csrf-token': csrfToken, 'wippid' : wippid },
				success: function( data )
				{
					checkProjectOptionsCompletion();				
				},
				error: displayServerErrorBanner
			});							
		})




	

	script.

		// A simple email validation regex.
		var validateEmailRegex = function(val) {
		  return (/.+\@.+\..+/i.test(val) && val.length <= 254);
		}

		var userEmail = "!{user_email}";

		var MAX_EMAILS = !{max_emails};

		var dev = $("#distribute-emails-validation");
		var det = $("#distribute-emails-textarea")

		var emailsValidatingTimeout;
		var uploadingEmails = false;

		var safeToValidateEmails = true;

		function uploadEmails() {
			var devHtml = "";

			console.log("Validating emails...");
		
			var emails = det.val().split("\n");
			var validEmails = new Set();
			
			for(var i = 0; i < emails.length; i++) {
				if(emails[i] == userEmail) {
					devHtml += "<i class=\"fa fa-close " + (emails[i].length == 0 ? "hide" : "") + "\" title=\"There is no need to add your own email address to the list.\"></i><br/>\n"
				} else {
					if(validateEmailRegex(emails[i])) {
						validEmails.add(emails[i]);
						if(validEmails.size > MAX_EMAILS) {
							devHtml += "<i class=\"fa fa-exclamation-triangle\" title=\"You may only enter up to " + MAX_EMAILS + " unique emails.\"></i><br/>\n"
						} else{
							devHtml += "<i class=\"fa fa-check\" title=\"This is a valid email address.\"></i><br/>\n"
						}	
					} else {
						devHtml += "<i class=\"fa fa-close " + (emails[i].length == 0 ? "hide" : "") + "\" title=\"This is not a valid email address.\"></i><br/>\n"
					}				
				}

			}
			dev.html(devHtml)
			$("#distribute-emails-count").html(validEmails.size);
			$("#distribute-emails-count").removeClass("too-many");
			$("#distribute-emails-warning").removeClass("show");
			if(validEmails.size > MAX_EMAILS) {
				$("#distribute-emails-count").addClass("too-many");
				$("#distribute-emails-warning").addClass("show");
			}
			console.log(emails)
			$.ajax(
			{
				url: 			'upload-emails',
				type:			'POST',
				data: 			{emails: emails, distribute_self: false},
				dataType: 		"json",
				headers: { 'csrf-token': csrfToken, 'wippid' : wippid },
				complete: function()
				{
					//$form.removeClass( 'is-uploading' );
				},
				success: function( data )
				{					
					//$("#input-range-group .havent-started").hide();
					$("#input-range-group .inapplicable").hide();
					$("#error-banner").removeClass("show");
					console.log("done")
					// Only display the 'saved' notification if there is at least one valid email.

					var nvalid = (dev).find("i.fa-check").length

					if( nvalid > 0) {
						$("#saved-notification-distribution").addClass("show");
						$("#li-distribution").addClass("completed");

						$("#input-range-group").removeClass("disabled");
						// Modify the slider
						$("#input-overlap").attr("max", nvalid + 1);	
						$("#input-range-group .right").html(nvalid + 1);	

						
					} else {
						$("#input-range-group").addClass("disabled");
						$("#input-range-group inapplicable").show();
					}
					updateOverlapSummary();
				},
				error: function()
				{								
					displayServerErrorBanner();
				}
			});			
		}

		function uploadEmailsSelf() {
			$("#input-range-group").addClass("disabled");
			$("#input-range-group .havent-started").show();
			$("#input-range-group .inapplicable").hide();
			var emails = [''];
			$.ajax(
			{
				url: 			'upload-emails',
				type:			'POST',
				data: 			{emails: emails, distribute_self: true},
				dataType: 		"json",
				headers: { 'csrf-token': csrfToken, 'wippid' : wippid },
				success: function( data )
				{					
					$("#input-overlap").attr("max", 1);
					$("#saved-notification-distribution").addClass("show");
					$("#li-distribution").addClass("completed");
					$("#input-range-group .havent-started").hide();
					$("#error-banner").removeClass("show");
					$("#input-range-group").addClass("disabled");
					$("#input-range-group .inapplicable").show();
					$("#input-range-group .right").html(1);	
					updateOverlapSummary();
				},
				error: function()
				{								
					displayServerErrorBanner();
				}
			});				
		}
		
			
	 

		det.on('input', function(e) {

			$("#input-range-group").addClass("disabled");
			$("#input-range-group inapplicable").show();


			$("#saved-notification-distribution").removeClass("show");
			$("#li-distribution").removeClass("completed");	
		
			// Remove validation mark from line user edited
			var ln = $(this).val().substr(0, $(this)[0].selectionStart).split("\n").length;

			var c = dev.children("i")
			if(c[ln-1])
				$(c[ln-1]).addClass("hide");
			console.log(ln);
			window.clearTimeout(emailsValidatingTimeout);
			emailsValidatingTimeout = window.setTimeout(uploadEmails, 1000);
			uploadingEmails = true;
		})

		$("#distribute-self-button").on('click', function() {
			$("#saved-notification-distribution").removeClass("show");
			$("#li-distribution").removeClass("completed");	
			$("#input-range-group .inapplicable").show();		
			$("#input-range-group .havent-started").hide();	
			window.clearTimeout(emailsValidatingTimeout);
			emailsValidatingTimeout = window.setTimeout(uploadEmailsSelf, 1000);
			uploadingEmails = true;
		});
		$("#distribute-to-emails-button").on('click', function() {
			$("#saved-notification-distribution").removeClass("show");
			$("#li-distribution").removeClass("completed");	
			$("#input-range-group .inapplicable").hide();		
			$("#input-range-group .havent-started").show();		
			window.clearTimeout(emailsValidatingTimeout);
			emailsValidatingTimeout = window.setTimeout(uploadEmails, 1000);
			uploadingEmails = true;
		});

		// Populate the textarea when emails already entered previously

		var existingEmails   = !{user_emails};
		var distributeSelf   = "!{distribute_self}";
		if(existingEmails && existingEmails.length > 0) {
			var existingEmailsStr = existingEmails.join("\n");
			det.val(existingEmailsStr);
			$("#saved-notification-distribution").addClass("show");
			$("#li-distribution").addClass("completed");
			//det.trigger('input');		
			var devHtml = "";
			for(var i = 0; i < existingEmails.length; i++) {
				devHtml += "<i class=\"fa fa-check\" title=\"This is a valid email address.\"></i><br/>\n"	
			}
			$("#distribute-emails-count").html(existingEmails.length);
			dev.html(devHtml)

			$("#input-range-group").removeClass("disabled");
			$("#input-range-group havent-started").hide();
			$("#input-overlap").attr("max", existingEmails.length + 1);	
			$("#input-range-group .right").html(existingEmails.length + 1);	
			updateOverlapSummary();

		}
		if(distributeSelf == "true") {
			$("#distribute-self-button").click();
		} else if(distributeSelf == "false") {
			$("#input-range-group havent-started").show();
			$("#distribute-to-emails-button").click();
		}

		det.autosize( {
			minRows: 10,

		});  

	// Project Name/Description
	script.

		function uploadNameDesc() {


			var pn = $("#project-name-form input").val();
			var pd = $("#project-description-form input").val();
			var o = {
				"name": pn,
				"desc": pd
			}
			console.log(pn, pd, o)

			console.log("Saved");
			$.ajax(
			{
				url: 			'upload-namedesc',
				type:			'POST',
				data: 			o,
				dataType: 		"json",
				headers: { 'csrf-token': csrfToken, 'wippid' : wippid },
				complete: function()
				{
					//$form.removeClass( 'is-uploading' );
				},
				success: function( data )
				{
					if(!data.success) {
						$("#error-banner").addClass("show");
						return;
					}
					$("#error-banner").removeClass("show");
					console.log("done");
					if($("#project-name-form input").val().length > 0 && $("#project-name-form input")[0].checkValidity()) {
						$("#saved-notification-project-details").addClass("show");
						$("#li-project-details").addClass("completed");
					}
				},
				error: function()
				{								
					displayServerErrorBanner();
				}
			});				

		}


		var existingProjName = "#{project_name}";
		var existingProjDesc = "#{project_desc}";
		if(existingProjName.length > 0) {
			$("#saved-notification-project-details").addClass("show");
			$("#li-project-details").addClass("completed");				
			$("#project-name-form input").val(existingProjName);
			$("#project-description-form").addClass("show");
			$("#project-description-form input").attr("tabindex", "0");
		}
		if(existingProjDesc.length > 0) {
			$("#project-description-form input").val(existingProjDesc);
		}


		// Project Name/Description
		var projnameTimeout;

		$("#input-project-name").on('input', function() {	// Show the description box after the user types something in the Project Name box.
			
			$("#saved-notification-project-details").removeClass("show");
			$("#li-project-details").removeClass("completed");

			if($(this).val().length > 0 && $(this)[0].checkValidity()) {
				$("#project-description-form").addClass("show");
				$("#project-description-form input").attr("tabindex", "0");
			} else {
				$("#project-description-form").removeClass("show");
				$("#project-description-form input").attr("tabindex", "-1");
			}
			window.clearTimeout(projnameTimeout);
			projnameTimeout = window.setTimeout(uploadNameDesc, 1000);
		});

		$("#input-project-description").on('input', function() {
			$("#saved-notification-project-details").removeClass("show");
			$("#li-project-details").removeClass("completed");
			window.clearTimeout(projnameTimeout);
			projnameTimeout = window.setTimeout(uploadNameDesc, 1000);
		});
	


	// Upload widget
	script.

		'use strict';

		var test = "hello\" there";

		var MAX_FILESIZE = !{max_filesize_mb} * 1024 * 1024;
		var file_metadata = !{file_metadata};

		// Drag and drop code and css found here:
		// https://css-tricks.com/examples/DragAndDropFileUploading/
		;( function( $, window, document, undefined )
		{




			if(file_metadata) renderSuccessBox(file_metadata, $("#form-upload-tokenized"), $("#form-upload-tokenized").find('.box__success_details'), $("#li-upload-tokenized"), $("#saved-notification-upload-tokenized"));



			// feature detection for drag&drop upload

			var isAdvancedUpload = function()
				{
					var div = document.createElement( 'div' );
					return ( ( 'draggable' in div ) || ( 'ondragstart' in div && 'ondrop' in div ) ) && 'FormData' in window && 'FileReader' in window;
				}();


			// applying the effect for every form

			$( '.box' ).each( function()
			{
				var $form		 = $( this ),
					$input		 = $form.find( 'input[type="file"]' ),
					$label		 = $form.find( 'label' ),
					$errorMsg	 = $form.find( '.box__error span' ),
					$restart	 = $form.find( '.box__restart' ),
					$successDets = $form.find( '.box__success_details' ),
					$uploading   = $form.find( '.box__uploading'),
					droppedFile  = null,
					$savedNotif  = $("#saved-notification-"  + $form.attr( 'action' )),
					$sidenavLi   = $("#li-"  + $form.attr( 'action' )),
					showFiles	 = function( file )
					{
						$label.text( file.name );
					};


				function validateFile(file) {
					var a = checkFilesize(file);
					var b = checkFiletype(file);
					$sidenavLi.removeClass("completed");
					$savedNotif.removeClass("show");

					if(!(a && b)) {
						$form.addClass( 'is-uploading' ).removeClass( 'is-error' );

						var errMsg;
						if(!a) { errMsg = "File must be less than #{max_filesize_mb}mb in size." }
						if(!b) { errMsg = "File must be a plain text file (.txt)." }

						// Send a message to the server to delete the documents of the project if client-side validation failed.

						$.ajax(
						{
							url: 			$form.attr( 'action' ) + '-reset',
							type:			$form.attr( 'method' ),
							data: 			{},
							dataType:		'json',
							cache:			false,
							contentType:	false,
							processData:	false,
							headers: { 'csrf-token': csrfToken, 'wippid' : wippid },
							complete: function()
							{
								$form.removeClass( 'is-uploading' );
							},
							success: function( data )
							{
								$("#error-banner").removeClass("show");
								$form.addClass('is-error');
								$errorMsg.text(errMsg);		
							},
							error: function()
							{								
								displayServerErrorBanner();
							}
						});
					}

					return a && b;
				}

				function checkFilesize(file) {
					if(file.size > MAX_FILESIZE) {
						return false;
					} else {
						return true;
					}
				}

				function checkFiletype(file) {
					if(file.type != "text/plain") {
						return false;									
					} else {
						return true;
					}
				}


				// letting the server side to know we are going to make an Ajax request
				$form.append( '<input type="hidden" name="ajax" value="1" />' );

				$input.on('click', function() {

					$(this).val("");
				});

				// automatically submit the form on file select
				$input.on( 'change', function( e )
				{	
					$form.removeClass( 'is-error is-success' );
					droppedFile = null; // Get rid of the dropped file the user may have dropped previously.
					if(validateFile(e.target.files[0])) {
						showFiles( e.target.files );					
						$form.trigger( 'submit' );
					}					
				});


				// drag&drop files if the feature is available
				if( isAdvancedUpload )
				{
					$form
					.addClass( 'has-advanced-upload' ) // letting the CSS part to know drag&drop is supported by the browser
					.on( 'drag dragstart dragend dragover dragenter dragleave drop', function( e )
					{	

						// preventing the unwanted behaviours
						e.preventDefault();
						e.stopPropagation();
					})
					.on( 'dragover dragenter', function() //
					{
						// Disable drop if form already completed.
						if( $form.hasClass("is-success") || $form.hasClass("is-uploading") ) {
							return;
						}

						$form.addClass( 'is-dragover' );
					})
					.on( 'dragleave dragend drop', function()
					{
						$form.removeClass( 'is-dragover' );
					})
					.on( 'drop', function( e )
					{

						// Disable drop if form already completed.
						if( $form.hasClass("is-success") || $form.hasClass("is-uploading") ) {							
							return;
						}

						var droppedFiles = e.originalEvent.dataTransfer.files; // the files that were dropped

						if(droppedFiles.length > 1) {							
							$form.addClass('is-error');
							$errorMsg.text("You may only upload 1 file at a time.");
						} else {
							droppedFile = droppedFiles[0];

							if(validateFile(droppedFile)) {
								console.log('file is fine')
								showFiles( droppedFile );						
								$form.trigger( 'submit' ); // automatically submit the form on file drop
							}					
						}					

						
					});
				}




				// if the form was submitted

		        var progressBar = $(this).find('.progress-bar-fill')
		        var progressBarContainer = $(this).find('.progress-bar-container')
		        var progressPercent = $(this).find('.progress-percent-complete')

				$form.on( 'submit', function( e )
				{				
					// preventing the duplicate submissions if the current one is in progress
					if( $form.hasClass( 'is-uploading' ) ) return false;
					progressBarContainer.removeClass("fade-out");
					

					$form.addClass( 'is-uploading' ).removeClass( 'is-error' );
					$uploading.html("<i class=\"fa fa-spinner fa-spin\"></i>&nbsp;Uploading…");

					if( isAdvancedUpload ) // ajax file upload for modern browsers
					{
						e.preventDefault();


						// gathering the form data
							
						console.log('g', $form.get(0))

						var ajaxData;
						if( droppedFile ) {
							ajaxData = new FormData();
							ajaxData.append( $input.attr("name"), droppedFile );	
						} else {
							ajaxData = new FormData( $form.get( 0 ) );						
						}

						console.log(ajaxData);
						
						

						var tokenizingTimeout;

						// ajax request
						$.ajax(
						{

							xhr: function() {
								var xhr = new window.XMLHttpRequest();

								xhr.upload.addEventListener("progress", function(evt) {
								  if (evt.lengthComputable) {
								    var percentComplete = evt.loaded / evt.total;
								    percentComplete = parseInt(percentComplete * 100);

								    progressBar.css("width", "" + percentComplete + "%")
								    progressPercent.html("" + percentComplete + "%")

								    if (percentComplete === 100) {
								    	$uploading.html("<i class=\"fa fa-spinner fa-spin\"></i>&nbsp;Tokenizing…");
								    	progressBarContainer.addClass("fade-out");
								    	window.setTimeout(function() {
								    		progressBar.css("width", "0%");
								    	}, 500);
								    	tokenizingTimeout = window.setTimeout(function() {
								    		console.log('heres johnny')
								    		$uploading.html("<i class=\"fa fa-spinner fa-spin\"></i>&nbsp;Tokenizing…<br/><span class=\"tokenization-time-info\">Tokenization is taking some time as your dataset is quite large.<br/>Please feel free to complete the rest of the form while tokenization is running.</span>");

								    	}, 2000);
								    }

								  }
								}, false);

								return xhr;
							},						
							url: 			$form.attr( 'action' ),
							type:			$form.attr( 'method' ),
							data: 			ajaxData,
							dataType:		'json',
							cache:			false,
							contentType:	false,
							processData:	false,
							headers: { 'csrf-token': csrfToken, 'wippid' : wippid },
							complete: function()
							{
								$form.removeClass( 'is-uploading' );
							},
							success: function( data )
							{
								$("#error-banner").removeClass("show");
								window.clearTimeout(tokenizingTimeout);
								console.log(data);
								
								if( !data.success ) {
									$form.addClass( 'is-error' );
									$errorMsg.text( data.error );
								} else {
									renderSuccessBox(data.details, $form, $successDets, $sidenavLi, $savedNotif);
								}
							},
							error: function()
							{								
								displayServerErrorBanner();
							}
						});
					}
					else // fallback Ajax solution upload for older browsers
					{
						var iframeName	= 'uploadiframe' + new Date().getTime(),
							$iframe		= $( '<iframe name="' + iframeName + '" style="display: none;"></iframe>' );

						$( 'body' ).append( $iframe );
						$form.attr( 'target', iframeName );

						$iframe.one( 'load', function()
						{
							var data = $.parseJSON( $iframe.contents().find( 'body' ).text() );
							$form.removeClass( 'is-uploading' ).addClass( data.success == true ? 'is-success' : 'is-error' ).removeAttr( 'target' );
							if( !data.success ) $errorMsg.text( data.error );
							$iframe.remove();
						});
					}
				});


				// restart the form if has a state of error/success

				$restart.on( 'click', function( e )
				{
					e.preventDefault();
					$input.trigger( 'click' );
				});

				// Firefox focus bug fix for file input
				$input
				.on( 'focus', function(){ $input.addClass( 'has-focus' ); })
				.on( 'blur', function(){ $input.removeClass( 'has-focus' ); });
			});

		})( jQuery, window, document );
